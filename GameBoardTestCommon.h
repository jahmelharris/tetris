namespace GAMEBOARDTEST{
	const int x = 12;
	const int y = 21;
	bool boardWithI[y][x] =        {{1,0,0,0,0,0,1,0,0,0,0,1},
				     	{1,0,0,0,0,0,1,0,0,0,0,1},
					{1,0,0,0,0,0,1,0,0,0,0,1},
					{1,0,0,0,0,0,1,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,0,0,0,0,0,0,0,0,0,0,1},
					{1,1,1,1,1,1,1,1,1,1,1,1}};

	bool boardWithIFirstDown[y][x] =       {{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,1,1,1,1,1,1,1,1,1,1,1}};
	
	bool boardWithJFirstDown[y][x] =       {{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,1,1,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,1,1,1,1,1,1,1,1,1,1,1}};

	bool boardWithZFirstDown[y][x] =       {{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,1,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,1,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,1,1,1,1,1,1,1,1,1,1,1}};

	bool boardWithIAllDown[y][x] =         {{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,1,1,1,1,1,1,1,1,1,1,1}};
	
	bool boardWithZAllDown[y][x] =         {{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,1,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,1,0,0,0,1},
						{1,1,1,1,1,1,1,1,1,1,1,1}};
	
	bool boardWithJAllDown[y][x] =         {{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,1,1,0,0,0,0,1},
						{1,1,1,1,1,1,1,1,1,1,1,1}};

	bool boardWithIRotatedOnce[y][x] =     {{1,0,0,0,0,0,0,0,0,0,0,1},
					  	{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,1,1,1,1,0,0,1},
						{1,1,1,1,1,1,1,1,1,1,1,1}};

	bool boardWithZRotatedOnce[y][x] =     {{1,0,0,0,0,0,0,0,0,0,0,1},
					  	{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,1,0,0,0,1},
						{1,0,0,0,0,0,1,1,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,1,1,1,1,1,1,1,1,1,1,1}};

	bool boardWithStackedIPiece[y][x] =     {{1,0,0,0,0,0,0,0,0,0,0,1},
					  	{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,1,1,1,1,1,1,1,1,1,1,1}};

	bool boardWithOverlappingIPiece[y][x] ={{1,0,0,0,0,0,0,0,0,0,0,1},
					  	{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,1,1,1,1,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,0,0,0,0,0,1,0,0,0,0,1},
						{1,1,1,1,1,1,1,1,1,1,1,1}};

	bool boardWithIPieceAllLeft[y][x] =    {{1,1,0,0,0,0,0,0,0,0,0,1},
					  	{1,1,0,0,0,0,0,0,0,0,0,1},
						{1,1,0,0,0,0,0,0,0,0,0,1},
						{1,1,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,1,1,1,1,1,1,1,1,1,1,1}};

	bool boardWithIPieceAllRight[y][x] =   {{1,0,0,0,0,0,0,0,0,0,1,1},
					  	{1,0,0,0,0,0,0,0,0,0,1,1},
						{1,0,0,0,0,0,0,0,0,0,1,1},
						{1,0,0,0,0,0,0,0,0,0,1,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,0,0,0,0,0,0,0,0,0,0,1},
						{1,1,1,1,1,1,1,1,1,1,1,1}};



void* getInitialBoard(int id)
	{
		switch(id)
		{
			case PIECEI:
				return &boardWithI;
		}
		return NULL;
	}
	void* getFirstMoveDownBoard(int id)
	{
		switch(id)
		{
			case PIECEI:
				return &boardWithIFirstDown;
			case PIECEJ:
				return &boardWithJFirstDown;
			case PIECEZ:
				return &boardWithZFirstDown;
			default:
				return NULL;
		}
	}

	void* getRotatedOnce(int id)
	{
		switch(id)
		{
			case PIECEI:
				return &boardWithIRotatedOnce;
			case PIECEZ:
				return &boardWithZRotatedOnce;
			default:
				return NULL;
		}
	}

	void* getAllMoveDownBoard(int id)
	{
		switch(id)
		{
			case PIECEI:
				return &boardWithIAllDown;
			case PIECEJ:
				return &boardWithJAllDown;
			case PIECEZ:
				return &boardWithZAllDown;

			default:
				return NULL;
		}
	}

	void* getStackedTetrominoes(int id)
	{
		switch(id)
		{
			case PIECEI:
				return &boardWithStackedIPiece;
			default:
				return NULL;
		}
	}

	void* getOverlappingTetrominoes(int id)
	{
		switch(id)
		{
			case PIECEI:
				return &boardWithOverlappingIPiece;
			default:
				return NULL;
		}
	}

	void* getAllLeftTetromino(int id)
	{
		switch(id)
		{
			case PIECEI:
				return &boardWithIPieceAllLeft;
			default:
				return NULL;
		}
	}

	void* getAllRightTetromino(int id)
	{
		switch(id)
		{
			case PIECEI:
				return &boardWithIPieceAllRight;
			default:
				return NULL;
		}
	}
	void compareBoards(void* testBoard, SHAPE realBoard)
	{
		for(int i=0;i<y;++i)
		{
			ASSERT_TRUE(memcmp((void*)&realBoard[i][0],(void*)&((bool(*)[x])testBoard)[i][0],x)==0);
		}
	}
}
